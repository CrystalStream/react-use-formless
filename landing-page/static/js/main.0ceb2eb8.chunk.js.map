{"version":3,"sources":["useFormless/index.js","FormExample/index.js","App.js","serviceWorker.js","index.js"],"names":["useForm","_ref","_ref2","initialValues","_ref2$validate","validate","_useState","useState","_useState2","Object","slicedToArray","values","setValues","_useState3","_useState4","errors","setErrors","_useState5","_useState6","touched","setTouched","_useState7","_useState8","isValid","setValid","setValue","name","value","objectSpread","defineProperty","touchValue","Error","error","setError","validateValues","fullErrors","keys","every","setValuesAsTouched","reduce","acc","reset","setAllValues","submitProps","_ref3","onSuccess","onError","onSubmit","ev","preventDefault","inputFieldProps","onInput","_ref4","target","onBlur","FormExample","isHidden","_useForm","email","checkbox","select","radioButton","username","showNotification","toggleNotification","handleInput","_ref3$target","setColorToInput","joinString","success","danger","getErrorMessageToInput","react_default","a","createElement","Fragment","bloomer_min","isColor","onClick","rows","className","is-hidden","JSON","stringify","isSize","assign","action","type","placeholder","onChange","_ref4$target","checked","isGrouped","textArea","App","view","changeViewTo","hasShadow","isBrand","isMenu","isFluid","hasTextColor","FormExample_FormExample","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ceb2eb8.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { Object } from \"core-js\";\n\nexport const useForm = ({ initialValues }, { validate = () => true }) => {\n  const [values, setValues] = useState(initialValues || {});\n  const [errors, setErrors] = useState({});\n  const [touched, setTouched] = useState({});\n  const [isValid, setValid] = useState(false);\n\n  const setError = (name) => {\n    if (typeof(validate) !== 'function') {\n      throw Error('validate option should be a function');\n    }\n    const error = validate({ values })[name];\n\n    setErrors({ ...errors, [name]: error });\n  }\n\n  const setValue = (name, value) => {\n    setValues({\n      ...values,\n      [name]: value,\n    });\n  }\n\n  const touchValue = (name) => {\n    setError(name);\n    setTouched({ ...touched, [name]: true });\n  }\n\n  const reset = () => {\n    setTouched({});\n    setErrors({});\n    setValues(initialValues);\n    setValid(false);\n  }\n\n  const setAllValues = (values) => {\n    setValuesAsTouched();\n    setValues(values);\n    validateValues(values);\n  }\n\n  const validateValues = (values) => {\n    const fullErrors = validate({ values });\n    const isValid = Object.keys(fullErrors).every(name => fullErrors[name] === '');\n\n    setErrors(fullErrors);\n    setValuesAsTouched();\n    setValid(isValid);\n\n    return isValid;\n  }\n\n  //DOM props\n  const submitProps = ({onSuccess, onError}) => ({\n    onSubmit: (ev) => {\n      const isValid = validateValues(values);\n      if (!isValid) {\n        ev.preventDefault();\n        onError();\n      } else {\n        onSuccess();\n      }\n\n    }\n  });\n\n  const inputFieldProps = (name) => ({\n    name,\n    value: values[name],\n    onInput: ({target: { value }}) =>\n      setValue(name, value),\n    onBlur: () => touchValue(name),\n  });\n\n  //Privated Functions\n\n  const setValuesAsTouched = () => {\n    setTouched(Object.keys(values).reduce((acc, name) => ({...acc, [name]: true}), {}));\n  }\n\n  return {\n    // Variables\n    values,\n    touched,\n    errors,\n    reset,\n    isValid,\n    // Actions\n    setAllValues,\n    setValue,\n    touchValue,\n    validateValues,\n    // DOM props\n    submitProps,\n    inputFieldProps,\n  }\n}","import React, { useState } from 'react';\nimport { Title, Field, Input, Label, Control, Select, TextArea, Checkbox, Radio, Button, Help, Notification, Delete } from \"bloomer\";\nimport joinString from \"classnames\";\n\nimport { useForm } from \"../useFormless\";\n\nexport const FormExample = ({isHidden}) => {\n  const FIELD_REQUIRED = 'This field is required';\n  const SELECT_FIELD = 'Please select this field';\n  const NOTIFICATION_MESSAGE_SUCCESS = 'Success message here!';\n  const NOTIFICATION_MESSAGE_FAILED = 'Validations form has failed, please check the fields again!';\n  const validate = ({ values }) => ({\n    name: values.name === '' ? FIELD_REQUIRED : '',\n    email: values.email  === '' ? FIELD_REQUIRED : '',\n    username: values.username === '' ? FIELD_REQUIRED : '',\n    select: values.select === '' ? FIELD_REQUIRED : '',\n    checkbox: !values.checkbox ? SELECT_FIELD : '',\n  });\n\n  const { values, errors, touched, setValue, touchValue, isValid, reset, setAllValues, submitProps, inputFieldProps } = useForm({\n    initialValues: {\n      name: '',\n      email: 'juan@amezQA',\n      checkbox: false,\n      select: '',\n      radioButton: 'yes'\n    }\n  }, { validate });\n\n  const [showNotification, toggleNotification] = useState(false);\n\n  const onSuccess = () => {\n    toggleNotification(true);\n  }\n\n  const onError = () => {\n    toggleNotification(true);\n  }\n\n  const handleInput = ({target: { name, value }}) => {\n    setValue(name, value);\n    toggleNotification(false);\n  }\n\n  const setColorToInput = name =>\n    joinString({\n      success: errors[name] === '',\n      danger: errors[name] && touched[name],\n    });\n\n  const getErrorMessageToInput = name =>\n    joinString({ [errors[name]]: errors[name] && touched[name] });\n\n  return (\n    <>\n      <Notification isHidden={!showNotification} isColor={joinString({ success: isValid, danger: !isValid })}>\n        <Delete onClick={() => toggleNotification(false)} />\n        {isValid ? NOTIFICATION_MESSAGE_SUCCESS : NOTIFICATION_MESSAGE_FAILED}\n      </Notification>\n      <TextArea rows={10} className={joinString({'is-hidden': isHidden})} value={JSON.stringify({ values, touched, errors }, null, 2)}>\n      </TextArea>\n      <Title isHidden={!showNotification} isSize={1}>Form example</Title>\n      <form action=\"\" {...submitProps({onSuccess, onError})} className={joinString({'is-hidden': isHidden})}>\n        <Field>\n          <Label>Name</Label>\n          <Control>\n            <Input\n              isColor={setColorToInput('name')}\n              type=\"text\"\n              placeholder='Your name'\n              value={values.name}\n              name='name'\n              onInput={handleInput}\n              onBlur={() => touchValue('name')}\n              />\n          </Control>\n          <Help isColor='danger'>{getErrorMessageToInput('name')}</Help>\n        </Field>\n\n        <Field>\n          <Label>Username</Label>\n          <Control>\n            <Input\n              isColor={setColorToInput('username')}\n              type=\"text\"\n              placeholder='Your username'\n              {...inputFieldProps('username')}\n              />\n          </Control>\n          <Help isColor='danger'>{getErrorMessageToInput('username')}</Help>\n        </Field>\n\n        <Field>\n          <Label>Email</Label>\n          <Control>\n            <Input\n              isColor={setColorToInput('email')}\n              placeholder='You email'\n              value={values.email}\n              name='email'\n              onInput={handleInput}\n              onBlur={() => touchValue('email')}\n              />\n          </Control>\n          <Help isColor='danger'>{getErrorMessageToInput('email')}</Help>\n        </Field>\n\n        <Field>\n          <Label>Select:</Label>\n          <Control>\n            <Select\n              isColor={setColorToInput('select')}\n              {...inputFieldProps('select')}\n              >\n              <option value=''>Gender</option>\n              <option value='M'>Male</option>\n              <option value='F'>Female</option>\n            </Select>\n          </Control>\n          <Help isColor='danger'>{getErrorMessageToInput('select')}</Help>\n        </Field>\n\n        <Field>\n          <Label>Message</Label>\n          <Control>\n            <TextArea\n              {...inputFieldProps('textArea')}\n              placeholder={'<TextArea />'}\n              />\n          </Control>\n          <Help isColor='danger'>{getErrorMessageToInput('textArea')}</Help>\n        </Field>\n\n        <Field>\n          <Control>\n            <Checkbox\n              onChange={({ target: { name, checked } }) => setValue(name, checked)}\n              checked={values.checkbox}\n              name='checkbox'\n              onBlur={() => touchValue('checkbox')}\n              >\n              I agree\n            </Checkbox>\n          </Control>\n          <Help isColor='danger'>{getErrorMessageToInput('checkbox')}</Help>\n        </Field>\n\n        <Field>\n          <Control>\n            <Radio\n              name=\"radioButton\"\n              value=\"yes\"\n              checked={values.radioButton === 'yes'}\n              onChange={handleInput}\n              onBlur={() => touchValue('radioButton')}\n              >\n              Yes\n            </Radio>\n            <Radio\n              name=\"radioButton\"\n              value=\"no\"\n              checked={values.radioButton === 'no'}\n              onChange={handleInput}\n              onBlur={() => touchValue('radioButton')}\n              >\n              No\n            </Radio>\n          </Control>\n        </Field>\n\n        <Field isGrouped>\n          <Control>\n            <Button isColor='primary' type=\"submit\">Submit</Button>\n          </Control>\n          <Control>\n            <Button isColor='info' onClick={reset}>Reset</Button>\n          </Control>\n          <Control>\n            <Button\n              isColor='link'\n              onClick={() => setAllValues({name: 'default name', email: 'default email', checkbox: true, radioButton: 'no', select: 'M', textArea: 'text area example'})}\n              >\n              set new values\n            </Button>\n          </Control>\n        </Field>\n      </form>\n    </>\n  );\n};\n","import React, { useState } from 'react';\n\nimport 'bulma';\nimport { Container, Nav, NavLeft, NavItem, NavRight, Button, Columns, Column, Menu, MenuList, MenuLabel, MenuLink, Section } from \"bloomer\";\n\nimport { FormExample } from './FormExample';\n\nconst App = () => {\n  const [view, changeViewTo] = useState('');\n  return (\n    <>\n      <Nav hasShadow>\n        <NavLeft>\n          <NavItem isBrand>React Hooks Training</NavItem>\n        </NavLeft>\n        <NavRight isMenu>\n          <NavItem>\n            <Button isColor=\"success\">\n              Go to home\n            </Button>\n          </NavItem>\n        </NavRight>\n      </Nav>\n      <Section>\n        <Container isFluid>\n          <Columns>\n            <Column isSize=\"1/4\">\n              <Menu>\n                <MenuLabel>Custom hooks</MenuLabel>\n                <MenuList>\n                  <li><MenuLink hasTextColor=\"grey-light\" onClick={() => changeViewTo('Register')}>useForm</MenuLink></li>\n                </MenuList>\n              </Menu>\n            </Column>\n            <Column isSize='3/4'>\n              <FormExample isHidden={view !== 'Register'}/>\n            </Column>\n          </Columns>\n        </Container>\n      </Section>\n    </>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}