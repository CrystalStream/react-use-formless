{"version":3,"sources":["serviceWorker.js","index.js","App.js","../../src/helpers/functions.js","../../src/UseFormless/BuiltInHandlersForForm.js","../../src/UseFormless/createParty.js","../../src/UseFormless/BuiltInInputProps.js","../../src/helpers/Object.js","../../src/UseFormless/formless.js","../../src/UseFormless/useFormless.js","../../src/helpers/tasker.js","form.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_hot_loader__WEBPACK_IMPORTED_MODULE_1__","_form_js__WEBPACK_IMPORTED_MODULE_2__","hot","className","pipe","fns","Array","_len","_key","arguments","params","_len2","_key2","forEach","fn","builtInHandlersForForm","Dformless","IStore","path","_ref","taskerValidations","initialValues","undefined","_ref$initialValues","validate","_ref$validate","setValue","name","_","value","touchAllFields","values","reset","isValid","errors","isValidParty","newValues","error","dispatchErrors","setError","validateField","touched","createParty","options","length","newPath","add","handlers","initializeInputProps","initialValue","syntathicEvent","onSuccess","onError","target","touchField","builtInInputProps","partyOptions","isObject","obj","_typeof","setObjectNested","_ref3","_ref3$path","firstPath","_ref3$path2","nextPaths","slice","getRecursive","object","_ref4","_ref4$path","reduce","reducedObject","currentPath","_ref8","formless","nestedObject","_ref2","objectValuesReduce","cb","Object","accumalated","_ref12","partyErrors","iterateObject","updateValue","entries","newObject","key","_ref6","_ref6$path","_ref7","_ref7$path","_ref9","partyValues","_ref10","_ref11","useState","_useState2","dispatchValues","_useState4","dispatchTouched","StoreAPI","_useState6","tasks","task","filter","_task","createTasker","__webpack_exports__","_useFormless","useFormless","ev","preventDefault","console","log","terms","aboutyou","inputProps","inputCheckboxProps","party","onSubmit","validateParty","addressForm","profile","Fragment","disabled","id","cols","rows","JSON","stringify","assign","type","placeholder","onClick"],"mappings":"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","file":"static/js/main.dd6fb3a7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { hot } from 'react-hot-loader';\n\nimport FormBasic from './form.js';\n\nconst App = () => {\n  return (\n    <section className=\"section\">\n      <h1>Form example basic</h1>\n      <FormBasic/>\n    </section>\n  );\n}\n\nexport default hot(module)(App);","export const pipe = (...fns) => (...params) =>\n  fns.forEach(fn => fn(...params))\n","import { pipe } from '../helpers/functions'\n\n// @function builtInHandlersForForm\n// connectting logic between domain with global state and behavior of a formulary of our app\nconst builtInHandlersForForm = (Dformless, IStore, path, { initialValues = {}, validate = () => '' }, taskerValidations) => {\n  const getValue = name => Dformless.getValue(IStore.values, { name, path })\n\n  const setValue = pipe(\n    (name, _) => IStore.dispatchTouched(Dformless.touchField(IStore.touched, { name, path })),\n    (name, value) => IStore.dispatchValues(Dformless.setValue(IStore.values, { name, value, path })))\n\n  const setValues = (newValues) =>\n    IStore.dispatchValues(newValues)\n\n  const setError = (name, error) =>\n    IStore.dispatchErrors(\n      Dformless.setError(\n        IStore.errors,\n        {\n          name,\n          error,\n          path\n        }))\n\n  const getError = (name) =>\n    Dformless.getValue(IStore.errors, { path, name })\n\n  const touchField = name =>\n    IStore.dispatchTouched(Dformless.touchField(IStore.touched, { name, path }))\n\n  const touchAllFields = () =>\n    IStore.dispatchTouched(Dformless.touchAllFields(IStore.values))\n\n  const reset = pipe(\n    () => IStore.dispatchValues(initialValues),\n    () => IStore.dispatchErrors({}))\n\n  const shouldShowError = (name) =>\n    Dformless.getValue(IStore.touched, { path, name }) &&\n    Dformless.getValue(IStore.errors, { path, name }) !== ''\n\n  const validateField = name =>\n    IStore.dispatchErrors(Dformless.validateField(\n      IStore.errors,\n      {\n        name,\n        value: Dformless.getValue(IStore.values, { name, path }),\n        path,\n        validate: (name, value) =>\n          validate(name, value, {values: IStore.values, touched: IStore.touched})\n      }))\n\n  const validateForm = () => {\n    const errors = taskerValidations.pipe(IStore.errors)\n\n    if (Dformless.isValid(errors)) return\n    touchAllFields()\n    IStore.dispatchErrors(errors)\n  }\n\n  const isValid = Dformless.isValid(IStore.errors)\n\n  const isValidParty = Dformless.isValidParty(IStore.errors, { path })\n\n  return ({\n    getValue,\n    setValue,\n    setValues,\n    getError,\n    setError,\n    shouldShowError,\n    touchField,\n    touchAllFields,\n    validateField,\n    validateForm,\n    reset,\n    isValid,\n    isValidParty\n  })\n}\n\nexport default builtInHandlersForForm\n","import builtInHandlersForForm from './BuiltInHandlersForForm'\nimport builtInInputProps from './BuiltInInputProps'\n\n// create party for create values nested and you can use the same API to handle all inputs in your forms\n// @constructs createParty\n// @param { DomainFormless } Dformless - domain for a form\n// @param { InterfaceStore } IStore - Interface Store (stores and setState functions) for handle updates\n// @param { Object } options - options given for the user\n\nconst createParty = (Dformless, IStore, options) => {\n  const { values, errors, touched } = IStore\n\n  return (name, path = [], taskerValidations) => {\n    const newPath = name ? [...path, name] : []\n\n    // add validator function to tasker\n    taskerValidations.add(errors => Dformless.validateParty(IStore.values, errors, { path: newPath, validate: options.validate }))\n\n    return ({\n      values,\n      touched,\n      errors,\n      ...builtInHandlersForForm(Dformless, IStore, newPath, options, taskerValidations),\n      ...builtInInputProps(Dformless, IStore, newPath, options, taskerValidations),\n      party: (name, partyOptions = { validate: () => '' }) =>\n        createParty(\n          Dformless,\n          IStore,\n          { ...partyOptions, initialValues: options.initialValues }\n        )(name, newPath, taskerValidations)\n    })\n  }\n}\n\nexport default createParty\n","import { pipe } from '../helpers/functions'\nimport builtInHandlersForForm from './BuiltInHandlersForForm'\n\n// @function builtInInputProps to create properties for input tags in react\nconst builtInInputProps = (Dformless, IStore, path, options, taskerValidations) => {\n  const handlers = builtInHandlersForForm(Dformless, IStore, path, options)\n\n  const initializeInputProps = pipe(\n    (name, initialValue) => IStore.dispatchValues(Dformless.setValue(IStore.values, { name, value: initialValue, path })),\n    (name, _) => IStore.dispatchTouched(Dformless.untouchField(IStore.touched, { name, path })),\n    (name, _) => handlers.setError(name, '')\n  )\n\n  const inputProps = (name, initialValue = '') => {\n    if (handlers.getValue(name) === undefined) {\n      initializeInputProps(name, initialValue)\n    }\n\n    return {\n      name,\n      value: handlers.getValue(name),\n      onChange: ({ target: { value } }) => handlers.setValue(name, value),\n      onBlur: () => {\n        handlers.touchField(name)\n        handlers.validateField(name)\n      }\n    }\n  }\n\n  const inputCheckboxProps = (name, initialValue = false) => {\n    if (handlers.getValue(name) === undefined) {\n      initializeInputProps(name, !!initialValue)\n    }\n\n    return {\n      name,\n      checked: handlers.getValue(name),\n      onChange: () => handlers.setValue(name, !handlers.getValue(name)),\n      onBlur: () => {\n        handlers.touchField(name)\n        handlers.validateField(name)\n      },\n      type: 'checkbox'\n    }\n  }\n\n  const onSubmit = (syntathicEvent) => {\n    const errors = taskerValidations.pipe(IStore.errors)\n\n    if (Dformless.isValid(errors)) {\n      options.onSuccess(syntathicEvent, { values: IStore.values })\n      return\n    }\n    handlers.touchAllFields()\n    IStore.dispatchErrors(errors)\n    options.onError(syntathicEvent)\n  }\n\n  return {\n    onSubmit,\n    inputProps,\n    inputCheckboxProps\n  }\n}\n\nexport default builtInInputProps\n","export const isObject = (obj) =>\n  typeof obj === 'object' && !Array.isArray(obj)\n\nexport const iterateObject = (target, updateValue) =>\n  Object.entries(target).reduce((newObject, [key, value]) =>\n    isObject(value)\n      ? ({ ...newObject, [key]: iterateObject(value, updateValue) })\n      : ({ ...newObject, ...updateValue([key, value]) })\n  , {})\n\nexport const setObjectNested = (target, { path = [], path: [firstPath, ...nextPaths], name, value }) =>\n  path.length\n    ? ({\n      ...target,\n      [firstPath]: setObjectNested(target[firstPath] || {}, { path: nextPaths, name, value })\n    })\n    : ({\n      ...target,\n      [name]: value\n    })\n\nexport const objectValuesReduce = (values, cb, initialValue) =>\n  Object.values(values).reduce(\n    (accumalated, value) => {\n      if (isObject(value)) {\n        return objectValuesReduce(value, cb, accumalated)\n      }\n      return cb(accumalated, value)\n    },\n    initialValue)\n\nexport const getRecursive = (object, { path = [] }) =>\n  path.reduce(\n    (reducedObject, currentPath) =>\n      reducedObject[currentPath],\n    object)\n","import { setObjectNested, iterateObject, objectValuesReduce, getRecursive, isObject } from '../helpers/Object'\n\nconst getValue = (values, { path, name } = {}) =>\n  path.reduce((nestedObject, currentPath) =>\n    nestedObject[currentPath] || {}, values\n  )[name]\n\nconst setValue = setObjectNested\n\nconst setError = (errors, { name, error, path }) =>\n  setObjectNested(errors, { name, value: error, path })\n\nconst touchAllFields = values =>\n  iterateObject(values, ([key, _]) => ({ [key]: true }))\n\nconst touchField = (touched, { path = [], name }) =>\n  setObjectNested(touched, { path, name, value: true })\n\nconst untouchField = (touched, { path = [], name }) =>\n  setObjectNested(touched, { path, name, value: false })\n\nconst validateField = (errors, { name, value, validate, path }) =>\n  setObjectNested(errors, { path, name, value: validate(name, value) || '' })\n\n// create a function that validate the form values at this level\nconst validateParty = (values, errors, { path, validate }) => {\n  // get only the values for this party\n  const partyValues = getRecursive(values, { path })\n\n  return Object.entries(partyValues).reduce((errors, [name, value]) => {\n    if (isObject(value)) { return errors }\n    return validateField(errors, { name, value, validate: validate, path })\n  }, errors)\n}\n\nconst isValid = errors =>\n  objectValuesReduce(errors, (isValid, value) => {\n    return isValid && value === ''\n  }, true)\n\nconst isValidParty = (errors, { path }) => {\n  const partyErrors = getRecursive(errors, { path })\n  if (!partyErrors) return false\n\n  return Object.values(partyErrors).reduce((isValid, value) => {\n    if (isObject(value)) return isValid\n    if (value !== '') return false\n    return isValid\n  }, true)\n}\n\nexport const formless = {\n  getValue,\n  setValue,\n  setError,\n  isValid,\n  isValidParty,\n  touchAllFields,\n  touchField,\n  untouchField,\n  validateField,\n  validateParty\n}\n","import { useState } from 'react'\nimport createParty from './createParty'\nimport { formless } from './formless'\nimport { createTasker } from '../helpers/tasker'\n\nexport default (options) => {\n  const [values, dispatchValues] = useState(options.initialValues || {})\n  const [touched, dispatchTouched] = useState({})\n  const [errors, dispatchErrors] = useState({})\n\n  const StoreAPI = {\n    values,\n    touched,\n    errors,\n    dispatchValues,\n    dispatchTouched,\n    dispatchErrors\n  }\n\n  const taskerValidations = createTasker()\n\n  return createParty(formless, StoreAPI, options)(null, [], taskerValidations)\n}\n","export const createTasker = function() {\n  let tasks = []\n\n  function add(task) {\n    if (typeof task !== 'function') return\n    tasks = [...tasks, task]\n  }\n\n  function remove(task) {\n    tasks = tasks.filter(function(_task) {\n      return task !== _task\n    })\n  }\n\n  function pipe(initialValue) {\n    return tasks.reduce(function (initialValue, task) {\n      return task(initialValue)\n    }, initialValue)\n  }\n\n  function run() {\n    tasks.forEach(function (task) {\n      task()\n    })\n  }\n\n  return {\n    tasks,\n    add,\n    remove,\n    pipe,\n    run\n  }\n}\n","import React from 'react';\nimport useFormless from \"react-useformless\";\n\n\nexport default () => {\n  const { inputProps, inputCheckboxProps, values, touched, errors, party, reset, isValid, onSubmit, validateParty } = useFormless({\n    onSuccess: (ev) => {\n      ev.preventDefault()\n      console.log('success')\n    },\n    onError: (ev) => {\n      ev.preventDefault()\n      console.log('error')\n    },\n    validate: (key, value) => {\n      const validations = {\n        terms: value === false && 'you must accept terms!',\n        aboutyou: value === '' && 'please tell us a little bit about you',\n      }\n      return validations[key] || ''\n    }\n  })\n  const addressForm = party('Address', { validate: (key, value) => !value && 'Is required'})\n  const profile = party('Profile')\n\n  return (\n    <>\n      <div>\n        isValid: {isValid} <br/>\n        values: <br/>\n        <textarea disabled name=\"\" id=\"\" cols=\"50\" rows=\"10\" value={JSON.stringify(values, null, '\\t')} />\n        <br/>touched values: <br/>\n        <textarea disabled name=\"\" id=\"\" cols=\"50\" rows=\"10\" value= {JSON.stringify(touched, null, '\\t')} />\n        <br/>Errors <br/>\n        <textarea disabled name=\"\" id=\"\" cols=\"50\" rows=\"10\" value= {JSON.stringify(errors, null, '\\t')} />\n      </div>\n      <form onSubmit={onSubmit}>\n        Profile: <br/>\n        <input type=\"text\" {...profile.inputProps('name', 'Gibran')}/>\n        <input type=\"text\" {...profile.inputProps('password')}/>\n        <div>\n          Address: <br/>\n          <input type=\"text\" {...addressForm.inputProps('street')}/>\n          <input type=\"text\" {...addressForm.inputProps('number', 0)}/>\n          <br/>city <br/>\n          <select {...addressForm.inputProps('city', 'OAX')}>\n            <option value=\"CQX\">Colima</option>\n            <option value=\"CDMX\">CDMX</option>\n            <option value=\"GDL\">Guadalajara</option>\n            <option value=\"OAX\">OAXACA</option>\n          </select>\n        </div>\n        <div>\n          about you: <br/>\n          <textarea {...inputProps('aboutyou')} placeholder=\"tell us something interesting about you ^^\" cols=\"80\" rows=\"10\"></textarea>\n          <br/>\n          <input type=\"checkbox\" {...inputCheckboxProps('terms', false)} /> you accept terms and conditions <br/>\n        </div>\n        <button type=\"button\" onClick={reset}>reset</button>\n        <button type=\"submit\">Send</button>\n        <button type='button' onClick={validateParty}>test validations for this party</button>\n      </form>\n    </>)\n}"],"sourceRoot":""}